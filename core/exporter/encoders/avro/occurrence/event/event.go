// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     Event.avsc
 */
package event

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type Event struct {
	Ts int64 `json:"ts"`

	Description string `json:"description"`

	Severity string `json:"severity"`

	NodeID string `json:"nodeID"`

	ContainerID string `json:"containerID"`

	RecordType string `json:"recordType"`

	OpFlags string `json:"opFlags"`

	PProcCmd string `json:"pProcCmd"`

	PProcPID int64 `json:"pProcPID"`

	ProcCmd string `json:"procCmd"`

	ProcPID int64 `json:"procPID"`

	Resource string `json:"Resource"`

	Tags string `json:"Tags"`

	Trace string `json:"Trace"`
}

const EventAvroCRC64Fingerprint = "zd\xc9N$\x96X\xef"

func NewEvent() *Event {
	return &Event{}
}

func DeserializeEvent(r io.Reader) (*Event, error) {
	t := NewEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeEventFromSchema(r io.Reader, schema string) (*Event, error) {
	t := NewEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeEvent(r *Event, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.Ts, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Description, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Severity, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NodeID, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ContainerID, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.RecordType, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OpFlags, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PProcCmd, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.PProcPID, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ProcCmd, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.ProcPID, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Resource, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Tags, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Trace, w)
	if err != nil {
		return err
	}
	return err
}

func (r *Event) Serialize(w io.Writer) error {
	return writeEvent(r, w)
}

func (r *Event) Schema() string {
	return "{\"fields\":[{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"severity\",\"type\":\"string\"},{\"name\":\"nodeID\",\"type\":\"string\"},{\"name\":\"containerID\",\"type\":\"string\"},{\"name\":\"recordType\",\"type\":\"string\"},{\"name\":\"opFlags\",\"type\":\"string\"},{\"name\":\"pProcCmd\",\"type\":\"string\"},{\"name\":\"pProcPID\",\"type\":\"long\"},{\"name\":\"procCmd\",\"type\":\"string\"},{\"name\":\"procPID\",\"type\":\"long\"},{\"name\":\"Resource\",\"type\":\"string\"},{\"name\":\"Tags\",\"type\":\"string\"},{\"name\":\"Trace\",\"type\":\"string\"}],\"name\":\"event.Event\",\"type\":\"record\"}"
}

func (r *Event) SchemaName() string {
	return "event.Event"
}

func (_ *Event) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Event) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Event) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Event) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Event) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Event) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Event) SetString(v string)   { panic("Unsupported operation") }
func (_ *Event) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Event) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Long{Target: &r.Ts}
	case 1:
		return &types.String{Target: &r.Description}
	case 2:
		return &types.String{Target: &r.Severity}
	case 3:
		return &types.String{Target: &r.NodeID}
	case 4:
		return &types.String{Target: &r.ContainerID}
	case 5:
		return &types.String{Target: &r.RecordType}
	case 6:
		return &types.String{Target: &r.OpFlags}
	case 7:
		return &types.String{Target: &r.PProcCmd}
	case 8:
		return &types.Long{Target: &r.PProcPID}
	case 9:
		return &types.String{Target: &r.ProcCmd}
	case 10:
		return &types.Long{Target: &r.ProcPID}
	case 11:
		return &types.String{Target: &r.Resource}
	case 12:
		return &types.String{Target: &r.Tags}
	case 13:
		return &types.String{Target: &r.Trace}
	}
	panic("Unknown field index")
}

func (r *Event) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Event) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *Event) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Event) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Event) Finalize()                        {}

func (_ *Event) AvroCRC64Fingerprint() []byte {
	return []byte(EventAvroCRC64Fingerprint)
}
